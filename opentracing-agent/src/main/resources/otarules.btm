
# This rule is required to force loading of ByteMan rules when the Spring Boot classloader
# is first instantiated, before any of the application components have been loaded. Scanning
# the classloaders resources for OpenTracing agent rule files is far easier this way, then
# having to scan the nested jar files.

RULE Load OpenTracing agent rules via Spring Boot Classloader
CLASS org.springframework.boot.loader.LaunchedURLClassLoader
METHOD <init>
AT EXIT
IF TRUE
DO
  io.opentracing.contrib.agent.OpenTracingManager.loadRules($0);
ENDRULE


#RULE ClassLoadMonitor trace create
#CLASS java.lang.ClassLoader
#METHOD defineClass(String, byte[], int, int, ProtectionDomain)
#AT EXIT
#IF TRUE
#DO
  #System.out.println("*** Called defineClass(" + $1 + ") in thread " + Thread.currentThread().getName() + " cl = " + $0);
  #traceStack("*** Called defineClass(" + $1 + ") in thread " + Thread.currentThread().getName() + " cl = " + $0, 15);
#ENDRULE



RULE Module getClassLoader
CLASS org.jboss.modules.Module
METHOD getClassLoader
AT EXIT
IF $0.getIdentifier().getName().startsWith("deployment.")
DO
  System.out.println("*** MODULE getClassLoader module="+$0);
  io.opentracing.contrib.agent.OpenTracingManager.loadRules($!);
ENDRULE

